setwd("~/Downloads/FA_SP_hw3")
install.packages("qcc")
# install.packages("qcc")
library("qcc")
data <- read.csv("temps.txt", sep="\t")
head(data)
cusum(data$X1996)
cusum(data$X1998)
cusum(data$X1999)
cusum(data$X1997)
cusum(data$X1998)
cusum(data$X1999)
cusum(data$X2000)
results1997 <- cusum(data$X1997)
results1997$pos
# install.packages("qcc")
library("qcc")
library("ggplot2")
data <- read.csv("temps.txt", sep="\t")
return (output$pos)
processor <- function(data){
output <- cusum(data)
return (output$pos)
}
for (x in colnames(data)[2:21]){
response <- data.frame(data.frame(processor(data[[x]])))
colnames(response) <- x
if(exists('results') && is.data.frame(get('results'))){
results <- cbind(results, response)
} else{
results <- response
}
}
View(results)
results$day <- data$DAY
# results$index <- seq.int(nrow(results))
df <- melt(results ,  id.vars = 'dat', variable.name = 'series')
library("reshape")
# results$index <- seq.int(nrow(results))
df <- melt(results ,  id.vars = 'dat', variable.name = 'series')
# results$index <- seq.int(nrow(results))
df <- melt(results ,  id.vars = 'day', variable.name = 'series')
ggplot(df, aes(index, value)) +
geom_line(aes(colour = variable))
ggplot(df, aes(day, value)) +
geom_line(aes(colour = variable))
results$index <- seq.int(nrow(results))
df <- melt(results ,  id.vars = 'index', variable.name = 'series')
ggplot(df, aes(index, value)) +
geom_line(aes(colour = variable))
# install.packages("qcc")
library("qcc")
library("reshape")
library("ggplot2")
data <- read.csv("temps.txt", sep="\t")
processor <- function(data){
output <- cusum(data)
return (output$pos)
}
for (x in colnames(data)[2:21]){
response <- data.frame(data.frame(processor(data[[x]])))
colnames(response) <- x
if(exists('results') && is.data.frame(get('results'))){
results <- cbind(results, response)
} else{
results <- response
}
}
results$index <- seq.int(nrow(results))
df <- melt(results ,  id.vars = 'index', variable.name = 'series')
ggplot(df, aes(index, value)) +
geom_line(aes(colour = variable))
# install.packages("qcc")
# install.packages("reshape")
library("qcc")
library("reshape")
library("ggplot2")
data <- read.csv("temps.txt", sep="\t")
head(data)
processor <- function(data){
output <- cusum(data)
return (output$pos)
}
for (x in colnames(data)[2:21]){
response <- data.frame(data.frame(processor(data[[x]])))
colnames(response) <- x
if(exists('results') && is.data.frame(get('results'))){
results <- cbind(results, response)
} else{
results <- response
}
}
View(results)
results$index <- seq.int(nrow(results))
View(results)
View(results)
df <- melt(results ,  id.vars = 'index', variable.name = 'series')
View(df)
ggplot(df, aes(index, value)) +
geom_line(aes(colour = variable))
response
cusum(data$1998)
cusum(data$X1998)
ggplot(df, aes(index, value)) +
geom_line(aes(colour = variable))
View(results)
library(MASS)
library(ROCR)
Boston$Result <- ifelse(Boston$medv > 30,1,0)
names(Boston)
Boston$medv <- NULL
logis <- glm(Result ~ ., data = Boston, family = binomial)
# Answer to QUESTION 1 and 2
summary(logis)
# Predict using the model built
Boston$pred <- predict(logis,data=Boston,type="response")
# Calculate confusion matrix
confusion_matrix <- table(actual=Boston$Result,predict=Boston$pred > 0.5)
confusion_matrix
confusion_matrix[1,1]
confusion_matrix[1,1]
confusion_matrix[1,2]
confusion_matrix[2,1]
confusion_matrix[1,1]/(confusion_matrix[1,1]+confusion_matrix[2,1])
412/424
412/424*100
# Calculate confusion matrix
confusion_matrix <- table(actual=Boston$Result,predict=Boston$pred >= 0.5)
confusion_matrix
72/82*100
install.packages("spacetime")
install.packages(c("lattice", "mgcv", "nlme", "survival"))
setwd("~/Google Drive/Georgia Tech Notes/Capstone/data")
library(spacetime)
package(spacetime)
library('spacetime')
install.packages("spacetime")
# install.packages("spacetime")
install.packages("rgdal")
library('rgdal')
setwd("~/Google Drive/Georgia Tech Notes/Capstone/data")
coral_data <- readOGR(dsm='gotech.sqlite', layer='coral')
dbfile="gotech.sqlite"
sqlite=dbDriver("SQLite")
# install.packages("spacetime")
# install.packages("rgdal")
install.packages("rsqlite")
# install.packages("spacetime")
# install.packages("rgdal")
install.packages("RSQLite")
library('RSQLite')
dbfile="gotech.sqlite"
sqlite=dbDriver("SQLite")
con=dbConnect(sqlite,dbfile, loadable.extensions=TRUE )
obrinfo('gotech.sqlite')
ogrinfo('gotech.sqlite')
ogrinfo gotech.sqlite
ogrinfo 'gotech.sqlite'
ogrinfo gotech.sqlite
ogrinfo gotech.sqlite
ogrinfo gotech
ogrinfo
library('rgdal')
ogrinfo
